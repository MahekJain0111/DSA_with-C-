#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;
struct node
{
    int data;
    struct node*left;
    struct node *right;
};
struct node * insert_(struct node *root,int key);
struct node *newnode(struct node*root,int key);
void preorder(struct node *root);
void inorder(struct node *root);
void postorder(struct node *root);
int main()
{
    struct node *root;
    root = NULL;
    while(1)
    {


    int ch;

    cout<<"enter choice"<<"\n";
    cout<<"1.insert"<<"\n";
    cout<<"2.preorder"<<"\n";
    cout<<"3.inorder"<<"\n";
    cout<<"4.postorder"<<"\n";
    cin>>ch;

    switch(ch)
    {
        case 1: int key;
              cout<<"enter root data";
              cin>>key;
            root = insert_(root,key);
        break;
        case 2: preorder(root);
        break;
        case 3:inorder(root);
        break;
        case 4: postorder(root);
        break;
        default : break;
    }
    }

}
struct node *newnode(struct node*root,int key)
{
    struct node *temp;
    temp = new node();
    temp->data = key;
    temp->left = NULL;
    temp->right = NULL;
    return temp;

}
struct node * insert_(struct node *root,int key)
{
    if(root == NULL)
    {
        return newnode(root,key);
    }
    else if(root->data > key)
    {
        root->left = insert_(root->left,key);
    }
    else
    {
        root->right = insert_(root->right,key);
    }


}
void preorder(struct node *root)
{ if (root == NULL)
        return;
    cout<<root->data;
    preorder(root->left);
    preorder(root->right);
}
void inorder(struct node *root)
{
if (root == NULL)
        return;
    inorder(root->left);
    cout<<root->data;
    inorder(root->right);
}
void postorder(struct node *root)
{if (root== NULL)
        return;

    postorder(root->left);
     postorder(root->right);
     cout<<root->data;
}



