#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;
struct node
{
    int data;
    struct node*left;
    struct node *right;
};
struct node *newnode(struct node *root,int key);
struct node *insert_(struct node *root,int key);
int height_(struct node *root);
int diameter_(struct node *root);
int main()
{
    struct node*root;
   root = NULL;
while(1)
{   int ch;
cout<<"enter choice"<<"\n";
 cout<<"1.insert"<<"\n";
 cout<<"2.Diameter of tree"<<"\n";
cin>>ch;
switch(ch)
{
    case 1: int key;
              cout<<"enter  data";
              cin>>key;
        root = insert_(root,key);
        break;
        case 2:
            cout<<diameter_(root) ;
        break;

         break;



}

}


}
struct node *newnode(struct node*root,int key)
{
    struct node *temp;
    temp = new node();
    temp->data = key;
    temp->left = NULL;
    temp->right = NULL;
    return temp;

}
struct node * insert_(struct node *root,int key)
{
    if(root == NULL)
    {
        return newnode(root,key);
    }
    else if(root->data > key)
    {
        root->left = insert_(root->left,key);
    }
    else
    {
        root->right = insert_(root->right,key);
    }


}
int height_(struct node *root)
{int ldepth,rdepth;

if(root == NULL)
{
    return 0;
}

else
{
    ldepth =  height_(root->left);
    rdepth =  height_(root->right);
    return max(ldepth,rdepth)+1;
}

}
int diameter_(struct node *root)
{
    if(root == NULL)
    {
        return 0;
    }
    else
    {
        int ldepth = height_(root->left);
        int rdepth = height_(root->right);
        int curdiameter = ldepth +rdepth +1;
        int ldiameter = diameter_(root->left);
        int rdiameter = diameter_(root->right);
        int a =  max(curdiameter,ldiameter);
        return max(a,rdiameter);
    }
}
