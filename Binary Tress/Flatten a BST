#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;
struct node
{
    int data;
    struct node*left;
    struct node *right;
};
struct node *newnode(struct node *root,int key);
struct node *insert_(struct node *root,int key);
void flatten(struct node*root);
void inorder(struct node *root);


int main()
{
    struct node*root;
   root = NULL;
while(1)
{   int ch;
cout<<"enter choice"<<"\n";
 cout<<"1.insert"<<"\n";
 cout<<"2.Flatten Tree"<<"\n";
 cout<<"3.Indorder Traversal"<<"\n";

cin>>ch;
switch(ch)
{
    case 1: int key;
              cout<<"enter  data";
              cin>>key;
        root = insert_(root,key);
        break;
        case 2:flatten(root);
            break;
        case 3:inorder(root);
            break;



}

}


}
struct node *newnode(struct node*root,int key)
{
    struct node *temp;
    temp = new node();
    temp->data = key;
    temp->left = NULL;
    temp->right = NULL;
    return temp;

}
struct node * insert_(struct node *root,int key)
{
    if(root == NULL)
    {
        return newnode(root,key);
    }
    else if(root->data > key)
    {
        root->left = insert_(root->left,key);
    }
    else
    {
        root->right = insert_(root->right,key);
    }


}
void inorder(struct node *root)
{   if(root==NULL)
{
    return ;
}
    inorder(root->left);
    cout<<root->data;

    inorder(root->right);
}

void flatten(struct node *root)
{
    if(root == NULL || root->right == NULL && root->left == NULL)
    {
        return;
    }
    if(root->left !=NULL)
    {
        flatten(root->left);
        struct node *temp ;
        temp= root->right;
        root->right = root->left;
        root->left = NULL;
        struct node *t;
        t=root->right;
        while(t->right!=NULL)
        {
            t=t->right;
        }
        t->right = temp;
    }
    flatten(root->right);
}
